{"ast":null,"code":"import { list, save, clear, listen } from './utils/localstorage';\n\nconst get = id => list().find(product => product.id === id);\n\nconst exists = id => !!get(id);\n\nconst add = (product, quantity) => isValid(product) ? exists(product.id) ? update(product.id, 'quantity', get(product.id).quantity + (quantity || 1)) : save(list().concat({ ...product,\n  quantity: quantity || 1\n})) : null;\n\nconst remove = id => save(list().filter(product => product.id !== id));\n\nconst quantity = (id, diff) => exists(id) && get(id).quantity + diff > 0 ? update(id, 'quantity', get(id).quantity + diff) : remove(id);\n\nconst update = (id, field, value) => save(list().map(product => product.id === id ? { ...product,\n  [field]: value\n} : product));\n\nconst total = cb => list().reduce((sum, product) => isCallback(cb) ? cb(sum, product) : sum += subtotal(product), 0);\n\nconst destroy = () => clear();\n\nconst onChange = cb => isCallback(cb) ? listen(cb) : console.log(typeof cb);\n\nconst isValid = product => product.id && product.price;\n\nconst subtotal = product => isCalcable(product) ? product.price * product.quantity : 0;\n\nconst isCalcable = product => product && product.price && product.quantity;\n\nconst isCallback = cb => cb && typeof cb === \"function\";\n\nexport { list, get, add, remove, update, quantity, total, destroy, exists, subtotal, onChange };","map":{"version":3,"sources":["/Users/kristoferdei/Documents/Coffee/coffee-frontend/node_modules/cart-localstorage/index.js"],"names":["list","save","clear","listen","get","id","find","product","exists","add","quantity","isValid","update","concat","remove","filter","diff","field","value","map","total","cb","reduce","sum","isCallback","subtotal","destroy","onChange","console","log","price","isCalcable"],"mappings":"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","sourcesContent":["import { list, save, clear, listen } from './utils/localstorage'\n\nconst get = (id) => list().find((product) => product.id === id)\n\nconst exists = (id) => !!get(id)\n\nconst add = (product, quantity) => isValid(product) ? exists(product.id) ? update(product.id, 'quantity', get(product.id).quantity + (quantity || 1)) : save(list().concat({ ...product, quantity: quantity || 1 })) : null;\n\nconst remove = (id) => save(list().filter((product) => product.id !== id))\n\nconst quantity = (id, diff) => exists(id) && get(id).quantity + diff > 0 ? update(id, 'quantity', get(id).quantity + diff) : remove(id);\n\nconst update = (id, field, value) => save(list().map((product) => product.id === id ? ({ ...product, [field]: value }) : product))\n\nconst total = (cb) => list().reduce((sum, product) => isCallback(cb) ? cb(sum, product) : (sum += subtotal(product)), 0);\n\nconst destroy = () => clear()\n\nconst onChange = (cb) => isCallback(cb) ? listen(cb) : console.log(typeof cb)\n\n\nconst isValid = (product) => product.id && product.price\n\nconst subtotal = (product) => isCalcable(product) ? (product.price * product.quantity) : 0\n\nconst isCalcable = (product) => (product && product.price && product.quantity)\n\nconst isCallback = (cb) => cb && typeof cb === \"function\"\n\nexport { list, get, add, remove, update, quantity, total, destroy, exists, subtotal, onChange };\n"]},"metadata":{},"sourceType":"module"}